From e79b7a7708236071c5862f7ac933be6fdbea4b39 Mon Sep 17 00:00:00 2001
From: Giraffe1966 <35208168+Giraffe1966@users.noreply.github.com>
Date: Mon, 4 Apr 2022 18:29:30 -0400
Subject: [PATCH] Fix memory leak in ChunkBuilder.

---
 .../client/render/chunk/compile/ChunkBuilder.java  | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

diff --git a/src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuilder.java b/src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuilder.java
index f7d13890c..12721ed8a 100644
--- a/src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuilder.java
+++ b/src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuilder.java
@@ -80,7 +80,8 @@ public void startWorkers() {
     /**
      * Notifies all worker threads to stop and blocks until all workers terminate. After the workers have been shut
      * down, all tasks are cancelled and the pending queues are cleared. If the builder is already stopped, this
-     * method does nothing and exits.
+     * method does nothing and exits. This method implicitly calls {@link ChunkBuilder#doneStealingTasks()} on the
+     * calling thread.
      */
     public void stopWorkers() {
         if (!this.running.getAndSet(false)) {
@@ -122,6 +123,8 @@ public void stopWorkers() {
         this.buildQueue.clear();
 
         this.world = null;
+        
+        this.doneStealingTasks();
     }
 
     public CompletableFuture<ChunkBuildResult> schedule(ChunkRenderBuildTask task) {
@@ -192,6 +195,15 @@ public CompletableFuture<Void> scheduleDeferred(ChunkRenderBuildTask task) {
     public Iterator<ChunkBuildResult> createDeferredBuildResultDrain() {
         return new QueueDrainingIterator<>(this.deferredResultQueue);
     }
+    
+    /**
+     * Cleans up resources allocated on the currently calling thread for the {@link ChunkBuilder#stealTask()} method.
+     * This method should be called on a thread that has stolen tasks when it is done stealing to prevent resource
+     * leaks.
+     */
+    public void doneStealingTasks() {
+        this.localContexts.remove();
+    }
 
     /**
      * "Steals" a task on the queue and allows the currently calling thread to execute it using locally-allocated
